import com.selesse.JavaHomeLocator
import com.selesse.RestartDaemon
import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.hidetake.ssh' version '2.10.1'
}

dependencies {
    implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1')
    implementation('org.xerial:sqlite-jdbc:3.32.3.2')
    implementation('com.sparkjava:spark-core:2.9.3')
    implementation(project(':steam-config-reader'))
    implementation(project(':common'))
}

application {
    mainClass = 'com.selesse.steam.crossplatform.sync.App'
}

ext {
    os = DefaultNativePlatform.currentOperatingSystem
    macConfigDirectory = (java.util.Optional.ofNullable(System.getenv("XDG_CONFIG_HOME"))
            .orElse(System.getProperty("user.home") + "/.config")) + "/steam-crossplatform-sync";

    propertiesFile = new File("${project.rootDir}/.env")
    remoteProperties = new Properties()
    if (propertiesFile.exists()) {
        propertiesFile.withInputStream { remoteProperties.load(it) }
    }
}

remotes {
    webServer {
        host = System.getenv().getOrDefault("SCPS_HOST", remoteProperties['HOST'])
        user = System.getProperty("user.name")
        identity = new File(System.getProperty("user.home") + "/.ssh/id_rsa")
    }
}

task remoteRelease {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                put from: shadowJar.outputs.files, into: '/opt/steam-crossplatform-sync/'
                execute "sudo /bin/systemctl restart steam-app-info-print"
            }
        }
    }
}

task localRelease(type: Copy) {
    from shadowJar.outputs
    into file("release")
}

task localOsRelease(type: Copy) {
    from shadowJar.outputs
    into {
        if (project.ext.os.windows) {
            return file(System.getenv("APPDATA") + "\\Microsoft\\Windows\\Start Menu\\Programs\\startup")
        } else if (project.ext.os.macOsX) {
            copy {
                from file('plist/com.selesse.steam-crossplatform-sync.plist.template')
                into "${System.getProperty("user.home")}/Library/LaunchAgents/"
                rename { filename -> filename.replace('.template', '') }
                filter(ReplaceTokens, tokens: [
                        "PROGRAM_HOME": project.ext.macConfigDirectory,
                        'JAVA_HOME'   : JavaHomeLocator.locate(project)
                ])
            }
            return file(project.ext.macConfigDirectory)
        }
    }
}

task restartDaemon() {
    doLast {
        def pathToShadowJar = new File(localOsRelease.outputs.files.singleFile, shadowJar.archiveFileName.get())
        new RestartDaemon(project, pathToShadowJar).restart()
    }
}

localOsRelease.finalizedBy(restartDaemon)

localRelease.dependsOn localOsRelease
remoteRelease.dependsOn shadowJar

shadowJar {
    mainClassName = 'com.selesse.steam.crossplatform.sync.App'
}
