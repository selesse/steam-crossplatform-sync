import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.hidetake.ssh' version '2.10.1'
}

dependencies {
    implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1')
    implementation('org.xerial:sqlite-jdbc:3.32.3.2')
    implementation('com.sparkjava:spark-core:2.9.3')
    implementation(project(':steam-config-reader'))
    implementation(project(':common'))
}

application {
    mainClass = 'com.selesse.steam.crossplatform.sync.App'
}

ext {
    os = DefaultNativePlatform.currentOperatingSystem
    macConfigDirectory = (java.util.Optional.ofNullable(System.getenv("XDG_CONFIG_HOME"))
            .orElse(System.getProperty("user.home") + "/.config")) + "/steam-crossplatform-sync";

    propertiesFile = new File("${project.rootDir}/.env")
    remoteProperties = new Properties()
    if (propertiesFile.exists()) {
        propertiesFile.withInputStream { remoteProperties.load(it) }
    }
}

remotes {
    webServer {
        host = System.getenv().getOrDefault("SCPS_HOST", remoteProperties['HOST'])
        user = System.getProperty("user.name")
        identity = new File(System.getProperty("user.home") + "/.ssh/id_rsa")
    }
}

task remoteRelease {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                put from: shadowJar.outputs.files, into: '/opt/steam-crossplatform-sync/'
                execute "sudo /bin/systemctl restart steam-app-info-print"
            }
        }
    }
}

task localRelease(type: Copy) {
    from shadowJar.outputs
    into file("release")
}

task localOsRelease(type: Copy) {
    from shadowJar.outputs
    into {
        if (project.ext.os.windows) {
            return file(System.getenv("APPDATA") + "\\Microsoft\\Windows\\Start Menu\\Programs\\startup")
        } else if (project.ext.os.macOsX) {
            copy {
                from file('plist/com.selesse.steam-crossplatform-sync.plist.template')
                into "${System.getProperty("user.home")}/Library/LaunchAgents/"
                rename { filename -> filename.replace('.template', '') }
                filter(ReplaceTokens, tokens: [
                        "PROGRAM_HOME": project.ext.macConfigDirectory,
                        'JAVA_HOME'   : System.getenv("JAVA_HOME")
                ])
            }
            file(project.ext.macConfigDirectory)
        }
    }

    doLast {
        if (project.ext.os.macOsX) {
            exec {
                executable 'launchctl'
                args('unload', "${System.properties['user.home']}/Library/LaunchAgents/com.selesse.steam-crossplatform-sync.plist")
            }
            exec {
                executable 'launchctl'
                args('load', "${System.properties['user.home']}/Library/LaunchAgents/com.selesse.steam-crossplatform-sync.plist")
            }
        }
    }
}

task killingExistingWindowsDaemon() {
    doLast {
        // Ugh, here's how this works: Find the javaw process, if it exists, kill it.
        def result = null
        new ByteArrayOutputStream().withStream { os ->
            exec {
                executable('wmic')
                args('process', 'where', 'name=\'javaw.exe\'', 'get', 'CommandLine,ProcessId')
                standardOutput = os
            }
            result = os.toString()
        }
        def outputJar = localOsRelease.outputs.files.asFileTree.toList().find { it.name.contains(shadowJar.archiveFileName.get()) }
        if (result != null && result != "No Instance(s) Available.") {
            def results = result.split("\n").grep { it.trim().length() > 0 }[1..-1]
            for (String process in results) {
                def processName = process.split("\"")[-2].trim()
                def pid = process.split("\"")[-1].trim()
                if (processName.equalsIgnoreCase(outputJar.toString())) {
                    exec {
                        executable('taskkill')
                        args('/pid', pid, '/f')
                    }
                }
            }
        }
    }
}

task forkWindowsDaemon(dependsOn: killingExistingWindowsDaemon) {
    doLast {
        ProcessBuilder processBuilder = new ProcessBuilder().command(
                System.getenv("JAVA_HOME") + File.separator + "bin" + File.separator + 'javaw.exe',
                "-jar",
                localOsRelease.outputs.files.asFileTree.toList().find { it.name.contains(shadowJar.archiveFileName.get()) }.toString())
        def process = processBuilder.start()
    }
}

if (project.ext.os.windows) {
    localOsRelease.finalizedBy(forkWindowsDaemon)
}

localRelease.dependsOn localOsRelease
remoteRelease.dependsOn shadowJar

shadowJar {
    mainClassName = 'com.selesse.steam.crossplatform.sync.App'
}
