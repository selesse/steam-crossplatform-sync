import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

dependencies {
    implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1')
    implementation('org.xerial:sqlite-jdbc:3.32.3.2')
    implementation(project(':steam-config-reader'))
    implementation(project(':common'))
}

application {
    mainClass = 'com.selesse.steam.crossplatform.sync.App'
}

ext {
    os = DefaultNativePlatform.currentOperatingSystem
    macConfigDirectory = (java.util.Optional.ofNullable(System.getenv("XDG_CONFIG_HOME"))
            .orElse(System.getProperty("user.home") + "/.config")) + "/steam-crossplatform-sync";
}

task localRelease(type: Copy) {
    from shadowJar.outputs
    into file("release")
}

task localOsRelease(type: Copy) {
    from shadowJar.outputs
    into {
        if (project.ext.os.windows) {
            return file(System.getenv("APPDATA") + "\\Microsoft\\Windows\\Start Menu\\Programs\\startup")
        } else if (project.ext.os.macOsX) {
            copy {
                from file('plist/com.selesse.steam-crossplatform-sync.plist.template')
                into "${System.getProperty("user.home")}/Library/LaunchAgents/"
                rename { filename -> filename.replace('.template', '') }
                filter(ReplaceTokens, tokens: [
                        "PROGRAM_HOME": project.ext.macConfigDirectory,
                        'JAVA_HOME'   : System.getenv("JAVA_HOME")
                ])
            }
            file(project.ext.macConfigDirectory)
        }
    }
}

localRelease.dependsOn localOsRelease

shadowJar {
    mainClassName = 'com.selesse.steam.crossplatform.sync.App'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
    }
}